<HTML>
<HEAD>
</HEAD>
<BODY>
<button onclick="createTable()">createTable</button>
<button id="choices" onclick="getChoices()">getChoices</button>
<div id="test"></div>
<script>


var cols = 7;
var rows = 6;
var game = new game();


function createTable(){
	var table = document.createElement("table");
	table.style.background = "rgb(70,0,185)";
	//table.style.borderCollapse = "collapse";
	table.style.padding = "5px 20px";
	table.style.borderTop = "solid 5px rgb(55,0,147)";
	table.style.borderBottom = "solid 5px rgb(55,0,147)";
	table.style.borderLeft = "double 15px rgb(55,0,147)";
	table.style.borderRight = "double 15px rgb(55,0,147)";

	for(var r=0; r<rows; r++){
		var tr = document.createElement("tr");
		for(var c=0; c<cols; c++){
			var td = document.createElement("td");
			td.id = c+","+(rows-r-1);
			td.onclick = function() { dropDisc(this); }; //IMPORTANT
			td.style.width = "50px";
			td.style.height = "50px";
			td.style.backgroundImage = "url('td.jpg')";
			td.style.backgroundPosition = "center";
			tr.appendChild(td);
		}
		table.appendChild(tr);
	}
	document.body.appendChild(table);
}

function dropDisc(el){
	//alert("aa");
	var loc = el.id.split(",");
	var col = loc[0];
	var drop = game.dropDisc(col, game.color);
	if(drop!=false){
		var td = document.getElementById(drop[0]+","+drop[1]);
		if(game.color==1){
			td.style.backgroundImage = "url('green.jpg')";
			td.style.backgroundPosition = "center";
		}
		if(game.color==2){
			td.style.backgroundImage = "url('red.jpg')";
			td.style.backgroundPosition = "center";
		}
		//td.innerHTML = game.color;
		game.switchColor();
	}
	var win = 0;
	if(win = game.isFinish()) alert("win: "+win);
}


function game(){
	this.cols = cols;
	this.rows = rows;
	this.fields = new Array();
	this.color = 1;
	this.max = 4;
	
	for(var c=0; c<this.cols; c++){
		this.fields[c] = new Array();
		for(var r=0; r<this.rows; r++){
			this.fields[c][r]=0;
		}
	}
	
	this.switchColor = function(){
		if(this.color==1) this.color = 2;
		else this.color = 1;
	}
	
	this.dropDisc = function(col, color){
		for(var r=0; r<this.rows; r++){
			if(this.fields[col][r]==0){
				this.fields[col][r] = color;
				return new Array(col, r);
			}
		}
		return false;
	}
	
	this.isFinish = function(){
		var count1 = 0;
		var count2 = 0;
		for(var r=0; r<this.rows; r++){
			for(var c=0; c<this.cols; c++){
				if(this.fields[c][r]==1){
					count1 = count1+1;
					if(count1>=this.max) return this.fields[c][r];
				}
				else count1=0;
				if(this.fields[c][r]==2){
					count2 = count2+1;
					if(count2>=this.max) return this.fields[c][r];
				}
				else count2=0;
			}
			count1 = 0;
			count2 = 0;
		}
		for(var c=0; c<this.cols; c++){
			for(var r=0; r<this.rows; r++){
				if(this.fields[c][r]==1){
					count1 = count1+1;
					if(count1>=this.max) return this.fields[c][r];
				}
				else count1=0;
				if(this.fields[c][r]==2){
					count2 = count2+1;
					if(count2>=this.max) return this.fields[c][r];
				}
				else count2=0;
			}
			count1 = 0;
			count2 = 0;			
		}
		var maxIncrRow = (this.rows-this.max);
		var minDecrRow = this.max-1;
		for(var r=0; r<this.rows; r++){
			var cTemp = 0;
			var rTemp = r;
			if(r<=maxIncrRow){
				while(cTemp<this.cols && rTemp<this.rows){
					if(this.fields[cTemp][rTemp]==1){
						count1 = count1+1;
						if(count1>=this.max) return this.fields[cTemp][rTemp];
					}
					else count1=0;
					if(this.fields[cTemp][rTemp]==2){
						count2 = count2+1;
						if(count2>=this.max) return this.fields[cTemp][rTemp];
					}
					else count2=0;
					cTemp = cTemp+1;
					rTemp = rTemp+1;
				}
				count1 = 0;
				count2 = 0;
				cTemp = this.cols-1;
				rTemp = r;
				while(cTemp>0 && rTemp<this.rows){
					if(this.fields[cTemp][rTemp]==1){
						count1 = count1+1;
						if(count1>=this.max) return this.fields[cTemp][rTemp];
					}
					else count1=0;
					if(this.fields[cTemp][rTemp]==2){
						count2 = count2+1;
						if(count2>=this.max) return this.fields[cTemp][rTemp];
					}
					else count2=0;
					cTemp = cTemp-1;
					rTemp = rTemp+1;
				}

			}
			if(r>=minDecrRow){
				count1 = 0;
				count2 = 0;
				cTemp = 0;
				rTemp = r;	
				while(cTemp<this.cols && rTemp>=0){
					if(this.fields[cTemp][rTemp]==1){
						count1 = count1+1;
						if(count1>=this.max) return this.fields[cTemp][rTemp];
					}
					else count1=0;
					if(this.fields[cTemp][rTemp]==2){
						count2 = count2+1;
						if(count2>=this.max) return this.fields[cTemp][rTemp];
					}
					else count2=0;
					cTemp = cTemp+1;
					rTemp = rTemp-1;
				}
				count1 = 0;
				count2 = 0;
				cTemp = this.cols-1;
				rTemp = r;
				while(cTemp>=0 && rTemp>=0){
					if(this.fields[cTemp][rTemp]==1){
						count1 = count1+1;
						if(count1>=this.max) return this.fields[cTemp][rTemp];
					}
					else count1=0;
					if(this.fields[cTemp][rTemp]==2){
						count2 = count2+1;
						if(count2>=this.max) return this.fields[cTemp][rTemp];
					}
					else count2=0;
					cTemp = cTemp-1;
					rTemp = rTemp-1;
				}
				count1 = 0;
				count2 = 0;
			}
		}
		return false;
	}
	
	
	this.getChoices = function(){
		var choices = new Array();
		var n=0;
		for(var c=0; c<this.cols; c++){
			for(var r=0; r<this.rows; r++){
				if(this.fields[c][r]==0){
					choices[n] = new Array(c, r);
					n = n+1;
					break;
				}
			}
		}
		return choices;
	}
	
	
	this.getAnalize = function(col, row, myColor){
		var risk = 0;
		var tRisk = 0;
		var oppColor = 2;
		if(myColor==2) oppColor = 1;
		if(col<this.cols-1){
			for(var c=col+1; c<this.cols; c++){
				if(this.fields[c][row]==oppColor) tRisk = tRisk+1;
			}
		}
	}
	
}

</script>

</BODY>
</HTML>