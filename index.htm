<HTML>
<HEAD>
</HEAD>
<BODY>
<button onclick="createTable()">createTable</button>
<button id="choices" onclick="testGetAnalizes()">testGetAnalizes</button>
<div id="color" style="width: 100px"></div>
<div id="test"></div>
<script>


var cols = 7;
var rows = 6;
var game = new game();

function testGetAnalizes(){
	var analizes = game.getAnalizeChoices();
	var el = document.getElementById("test");
	var txt;
	for(var i=0; i<analizes.length; i++){
		if(i==0) txt = analizes[i][0]+","+analizes[i][1]+","+analizes[i][2]+","+analizes[i][3]+"  |  ";
		else txt = txt+analizes[i][0]+","+analizes[i][1]+","+analizes[i][2]+","+analizes[i][3]+"  |  ";
	}
	el.innerHTML = txt;
}

/*
function test(ev, el){
	if(ev.button==1){
		var loc = el.id.split(",");
		var col = loc[0];
		var drop = game.getDropLocation(col);
		if(drop!=false){
			var analize = game.getAnalize(parseInt(col), drop[1], game.color);
			////document.getElementById("test").textContent = "profit: "+analize[0]+"    risk: "+analize[1];
			////alert(analize.length);
			//alert("profit: "+analize[0]+"    risk: "+analize[1]);
		}
	}
	else{ 
		dropDisc(el);
		testChoices();
	}
}

function testAnalize(col, row, color){
	var analize = game.getAnalize(col, row, color);
	if(analize){
		//alert("profit: "+analize[0]+"    risk: "+analize[1]);
		return true;
	}
	return false;
}

function testAnalizes(){ //write all analizes on td-choices
	var tds = document.getElementsByTagName("td");
	for(var i=0; i<tds.length; i++){
		tds[i].innerHTML = "";
	}
	var choices = game.getChoices();
	var a=0;
	var i=0;
	for(i=0; i<choices.length; i++){
		try{
			if(testAnalize(choices[i][0], choices[i][1], game.color)==true){
				a = a+1;
				
			}
		}
		catch(err){
			alert(choices[i][0]+" nie dziala")
		};
	}
	//alert("Jest: "+a+"   ,   powinno byc: "+i);
}

function testChoices(){ //write all analizes on td-choices
	var tds = document.getElementsByTagName("td");
	for(var i=0; i<tds.length; i++){
		tds[i].innerHTML = "";
	}
	var choices = game.getChoices();
	for(var i=0; i<choices.length; i++){
		var analize = game.getAnalize(choices[i][0], choices[i][1], game.color);
		//if(analize) alert(analize[0]);
		var td = document.getElementById(choices[i][0]+","+choices[i][1]);
		td.style.textAlign = "center";
		td.textContent = analize[0]+" , "+analize[1];
	}
}
*/

function createTable(){
	var table = document.createElement("table");
	table.style.background = "rgb(70,0,185)";
	//table.style.borderCollapse = "collapse";
	table.style.padding = "5px 20px";
	table.style.borderTop = "solid 5px rgb(55,0,147)";
	table.style.borderBottom = "solid 5px rgb(55,0,147)";
	table.style.borderLeft = "double 15px rgb(55,0,147)";
	table.style.borderRight = "double 15px rgb(55,0,147)";

	for(var r=0; r<rows; r++){
		var tr = document.createElement("tr");
		for(var c=0; c<cols; c++){
			var td = document.createElement("td");
			td.id = c+","+(rows-r-1);
			td.onclick = function() { dropDisc(this); }; //IMPORTANT
			//td.onmousedown = function() { test(event, this);}; //IMPORTANT
			td.style.width = "50px";
			td.style.height = "50px";
			td.style.backgroundImage = "url('td.jpg')";
			td.style.backgroundPosition = "center";
			tr.appendChild(td);
		}
		table.appendChild(tr);
	}
	document.body.appendChild(table);
}

function dropDisc(el){
	//alert("aa");
	var loc = el.id.split(",");
	var col = loc[0];
	var drop = game.dropDisc(col, game.color);
	if(drop!=false){
		var td = document.getElementById(drop[0]+","+drop[1]);
		if(game.color==1){
			td.style.backgroundImage = "url('green.jpg')";
			td.style.backgroundPosition = "center";
		}
		if(game.color==2){
			td.style.backgroundImage = "url('red.jpg')";
			td.style.backgroundPosition = "center";
		}
		//td.innerHTML = game.color;
		game.switchColor();
		document.getElementById("color").textContent = "color: "+game.color;
		if(game.color==1)
			document.getElementById("color").style.background = "rgb(61,235,60)";
		else 
			document.getElementById("color").style.background = "rgb(255,102,52)";
			
	}
	var win = 0;
	if(win = game.isFinish()) alert("win: "+win);
}


function game(){
	this.cols = cols;
	this.rows = rows;
	this.fields = new Array();
	this.color = 1;
	this.max = 4;
	
	for(var c=0; c<this.cols; c++){
		this.fields[c] = new Array();
		for(var r=0; r<this.rows; r++){
			this.fields[c][r]=0;
		}
	}
	
	this.switchColor = function(){
		if(this.color==1) this.color = 2;
		else this.color = 1;
	}
	
	this.dropDisc = function(col, color){
		for(var r=0; r<this.rows; r++){
			if(this.fields[col][r]==0){
				this.fields[col][r] = color;
				return new Array(col, r);
			}
		}
		return false;
	}
	
	this.getDropLocation = function(col){
		for(var r=0; r<this.rows; r++){
			if(this.fields[col][r]==0){
				return new Array(col, r);
			}
		}
		return false;		
	}
	
	this.isFinish = function(){
		var count1 = 0;
		var count2 = 0;
		for(var r=0; r<this.rows; r++){
			for(var c=0; c<this.cols; c++){
				if(this.fields[c][r]==1){
					count1 = count1+1;
					if(count1>=this.max) return this.fields[c][r];
				}
				else count1=0;
				if(this.fields[c][r]==2){
					count2 = count2+1;
					if(count2>=this.max) return this.fields[c][r];
				}
				else count2=0;
			}
			count1 = 0;
			count2 = 0;
		}
		for(var c=0; c<this.cols; c++){
			for(var r=0; r<this.rows; r++){
				if(this.fields[c][r]==1){
					count1 = count1+1;
					if(count1>=this.max) return this.fields[c][r];
				}
				else count1=0;
				if(this.fields[c][r]==2){
					count2 = count2+1;
					if(count2>=this.max) return this.fields[c][r];
				}
				else count2=0;
			}
			count1 = 0;
			count2 = 0;			
		}
		var maxIncrRow = (this.rows-this.max);
		var minDecrRow = this.max-1;
		for(var r=0; r<this.rows; r++){
			var cTemp = 0;
			var rTemp = r;
			if(r<=maxIncrRow){
				while(cTemp<this.cols && rTemp<this.rows){
					if(this.fields[cTemp][rTemp]==1){
						count1 = count1+1;
						if(count1>=this.max) return this.fields[cTemp][rTemp];
					}
					else count1=0;
					if(this.fields[cTemp][rTemp]==2){
						count2 = count2+1;
						if(count2>=this.max) return this.fields[cTemp][rTemp];
					}
					else count2=0;
					cTemp = cTemp+1;
					rTemp = rTemp+1;
				}
				count1 = 0;
				count2 = 0;
				cTemp = this.cols-1;
				rTemp = r;
				while(cTemp>0 && rTemp<this.rows){
					if(this.fields[cTemp][rTemp]==1){
						count1 = count1+1;
						if(count1>=this.max) return this.fields[cTemp][rTemp];
					}
					else count1=0;
					if(this.fields[cTemp][rTemp]==2){
						count2 = count2+1;
						if(count2>=this.max) return this.fields[cTemp][rTemp];
					}
					else count2=0;
					cTemp = cTemp-1;
					rTemp = rTemp+1;
				}

			}
			if(r>=minDecrRow){
				count1 = 0;
				count2 = 0;
				cTemp = 0;
				rTemp = r;	
				while(cTemp<this.cols && rTemp>=0){
					if(this.fields[cTemp][rTemp]==1){
						count1 = count1+1;
						if(count1>=this.max) return this.fields[cTemp][rTemp];
					}
					else count1=0;
					if(this.fields[cTemp][rTemp]==2){
						count2 = count2+1;
						if(count2>=this.max) return this.fields[cTemp][rTemp];
					}
					else count2=0;
					cTemp = cTemp+1;
					rTemp = rTemp-1;
				}
				count1 = 0;
				count2 = 0;
				cTemp = this.cols-1;
				rTemp = r;
				while(cTemp>=0 && rTemp>=0){
					if(this.fields[cTemp][rTemp]==1){
						count1 = count1+1;
						if(count1>=this.max) return this.fields[cTemp][rTemp];
					}
					else count1=0;
					if(this.fields[cTemp][rTemp]==2){
						count2 = count2+1;
						if(count2>=this.max) return this.fields[cTemp][rTemp];
					}
					else count2=0;
					cTemp = cTemp-1;
					rTemp = rTemp-1;
				}
				count1 = 0;
				count2 = 0;
			}
		}
		return false;
	}
	
	
	this.getAnalizeChoices = function(){
		var color = this.color;
		var choices = new Array();
		choices = this.getChoices();
		var analizes = new Array();
		for(var i=0; i<choices.length; i++){
			var tmpAnalizes = new Array();
			tmpAnalizes = this.getAnalize(choices[i][0], choices[i][1], color);
			analizes[i] = new Array();
			analizes[i][0] = choices[i][0];
			analizes[i][1] = choices[i][1];
			analizes[i][2] = tmpAnalizes[0];
			analizes[i][3] = tmpAnalizes[1];
			//analizes[i] = new Array(choices[0], choices[1], tmpAnalizes[0], tmpAnalizes[1]);
		}
		//alert(analizes[6][3]);
		return analizes;
	}
	
	this.getChoices = function(){
		var choices = new Array();
		var n=0;
		for(var c=0; c<this.cols; c++){
			for(var r=0; r<this.rows; r++){
				if(this.fields[c][r]==0){
					choices[n] = new Array(c, r);
					n = n+1;
					break;
				}
			}
		}
		return choices;
	}
	
	this.getAnalize = function(col, row, myColor){
		var risk = 0;
		var tRisk1 = 0;
		var tRisk2 = 0;
		var profit = 0;
		var tProfit1 = 0;
		var tProfit2 = 0;
		var oppColor = 2;
		if(myColor==2) oppColor = 1;
		var u=0;
		//in Rows
		if(col<this.cols-1){
			for(var c=col+1; c<this.cols; c++){
				if(this.fields[c][row]==oppColor) tRisk1 = tRisk1+1;
				else { break; };
				u = u+1;
			}
			for(var c=col+1; c<this.cols; c++){
				if(this.fields[c][row]==myColor) tProfit1 = tProfit1+1;
				else { break; };
			}
		}
		
		if(col>0){
			for(var c=col-1; c>=0; c--){
				if(this.fields[c][row]==oppColor) tRisk2 = tRisk2+1;
				else break;
			}
			for(var c=col-1; c>=0; c--){
				if(this.fields[c][row]==myColor) tProfit2 = tProfit2+1;
				else break;
			}
		}
		if(tRisk1>0 && tRisk2>0) tRisk1 = tRisk1+tRisk2;
		if(tRisk1<tRisk2) tRisk1 = tRisk2;
		if(tRisk1>risk) risk = tRisk1;
		if(tProfit1>0 && tProfit2>0) tProfit1 = tProfit1+tProfit2;
		if(tProfit1<tProfit2) tProfit1 = tProfit2;
		if(tProfit1>profit) profit = tProfit1;
		tRisk1 = 0;
		tRisk2 = 0;
		tProfit1 = 0;
		tProfit2 = 0;
		
		//in Column
		if(row<this.rows-1){
			for(var r=row+1; r<this.rows; r++){
				if(this.fields[col][r]==oppColor) tRisk1 = tRisk1+1;
				else break;
			}
			for(var r=row+1; r<this.rows; r++){
				if(this.fields[col][r]==myColor) tProfit1 = tProfit1+1;
				else break;
			}			
		}
		if(row>0){
			for(var r=row-1; r>=0; r--){
				if(this.fields[col][r]==oppColor) tRisk2 = tRisk2+1;
				else break;
			}
			for(var r=row-1; r>=0; r--){
				if(this.fields[col][r]==myColor) tProfit2 = tProfit2+1;
				else break;
			}
		}
		if(tRisk1>0 && tRisk2>0) tRisk1 = tRisk1+tRisk2;
		if(tRisk1<tRisk2) tRisk1 = tRisk2;
		if(tRisk1>risk) risk = tRisk1;
		if(tProfit1>0 && tProfit2>0) tProfit1 = tProfit1+tProfit2;
		if(tProfit1<tProfit2) tProfit1 = tProfit2;
		if(tProfit1>profit) profit = tProfit1;
		tRisk1 = 0;
		tRisk2 = 0;
		tProfit1 = 0;
		tProfit2 = 0;
		//alert("b");
		//in Diagonals
		//RIGHT and UP
		
		var c=col+1;
		var r=row+1;
		while(c<this.cols && r<this.rows){
			if(this.fields[c][r]==oppColor) tRisk1 = tRisk1+1;
			else break;
			c = c+1;
			r = r+1;
		}
		c = col+1;
		r = row+1;		
		while(c<this.cols && r<this.rows){
			if(this.fields[c][r]==myColor) tProfit1 = tProfit1+1;
			else break;
			c = c+1;
			r = r+1;
		}
		
		//LEFT and DOWN
		c=col-1;
		r=row-1;
		while(c>=0 && r>=0){
			if(this.fields[c][r]==oppColor) tRisk2 = tRisk2+1;
			else break;
			c = c-1;
			r = r-1;
		}
		c = col-1;
		r = row-1;		
		while(c>=0 && r>=0){
			if(this.fields[c][r]==myColor) tProfit2 = tProfit2+1;
			else break;
			c = c-1;
			r = r-1;
		}
		if(tRisk1>0 && tRisk2>0) tRisk1 = tRisk1+tRisk2;
		if(tRisk1<tRisk2) tRisk1 = tRisk2;
		if(tRisk1>risk) risk = tRisk1;
		if(tProfit1>0 && tProfit2>0) tProfit1 = tProfit1+tProfit2;
		if(tProfit1<tProfit2) tProfit1 = tProfit2;
		if(tProfit1>profit) profit = tProfit1;
		tRisk1 = 0;
		tRisk2 = 0;
		tProfit1 = 0;
		tProfit2 = 0;		
		
		//RIGHT and DOWN
		c = col+1;
		r = row-1;
		while(c<this.cols && r>=0){
			if(this.fields[c][r]==oppColor) tRisk1 = tRisk1+1;
			else break;
			c = c+1;
			r = r-1;
		}
		c = col+1;
		r = row-1;
		while(c<this.cols && r>=0){
			if(this.fields[c][r]==myColor) tProfit1 = tProfit1+1;
			else break;
			c = c+1;
			r = r-1;
		}
		//LEFT and UP
		c = col-1;
		r = row+1;
		while(c>=0 && r<this.rows){
			if(this.fields[c][r]==oppColor) tRisk2 = tRisk2+1;
			else break;
			c = c-1;
			r = r+1;
		}
		c = col-1;
		r = row+1;
		while(c>=0 && r<this.rows){
			if(this.fields[c][r]==myColor) tProfit2 = tProfit2+1;
			else break;
			c = c-1;
			r = r+1;
		}
		if(tRisk1>0 && tRisk2>0) tRisk1 = tRisk1+tRisk2;
		if(tRisk1<tRisk2) tRisk1 = tRisk2;
		if(tRisk1>risk) risk = tRisk1;
		if(tProfit1>0 && tProfit2>0) tProfit1 = tProfit1+tProfit2;
		if(tProfit1<tProfit2) tProfit1 = tProfit2;
		if(tProfit1>profit) profit = tProfit1;
		tRisk1 = 0;
		tRisk2 = 0;
		tProfit1 = 0;
		tProfit2 = 0;	
		return new Array(profit, risk);
	}
	
	
	
}

</script>

</BODY>
</HTML>